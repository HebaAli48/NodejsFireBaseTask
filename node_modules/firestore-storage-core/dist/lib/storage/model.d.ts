import { ClassConstructor } from 'class-transformer';
import { BaseModel, ModelDataOnly, ModelDataWithId, PatchUpdate } from './types';
export interface ModelMetaInternal {
    id?: string;
    rawPath?: string;
}
export type ModelMeta<R extends boolean = false> = R extends true ? Required<ModelMetaInternal> : ModelMetaInternal;
export declare class BaseModelClass<T extends BaseModel> implements BaseModel, ModelMeta {
    private readonly __metadata?;
    constructor(data: PatchUpdate<ModelDataWithId<T>> | ModelDataOnly<T>, meta?: ModelMeta);
    get id(): string;
    set id(id: string);
    get _rawPath(): string;
    getData(): ModelDataOnly<T>;
}
export declare function serialize<T, V>(cls: ClassConstructor<T>, plain: V): T;
export declare function DateTransformer(): (target: object, key: string) => void;
//# sourceMappingURL=model.d.ts.map