import { BaseModelClass, ModelMeta } from './model';
import { BaseModel, ModelDataOnly, ModelDataWithId, PatchUpdate } from './types';
export interface IDocumentTransformer<T extends BaseModel> {
    fromFirestoreToObject(data: ModelDataOnly<T>, meta: ModelMeta): T;
    toFirestoreDocument(doc: T): {
        id: string;
        data: ModelDataOnly<T>;
    };
    toFirestoreDocument(doc: ModelDataOnly<T> | PatchUpdate<ModelDataWithId<T>>): {
        id: undefined;
        data: ModelDataOnly<T>;
    };
    toFirestoreDocument(doc: T | ModelDataOnly<T> | PatchUpdate<ModelDataWithId<T>>): {
        id?: string;
        data: ModelDataOnly<T>;
    };
}
export declare class ModelClassTransformer<T extends BaseModelClass<T>> implements IDocumentTransformer<T> {
    private TypeClass;
    constructor(TypeClass: new (...args: any[]) => T);
    fromFirestoreToObject(data: any, meta: any): T;
    toFirestoreDocument(doc: any): any;
}
export declare const DEFAULT_DOCUMENT_TRANSFORMER: IDocumentTransformer<BaseModel>;
//# sourceMappingURL=transformer.d.ts.map